# GitHub Actions workflow to deploy a Next.js site to GitHub Pages
name: Deploy Next.js site to Pages

on:
  # Trigger the workflow on push to the "main" branch
  push:
    branches: ["main"]

  # Allow manual runs from the Actions tab
  workflow_dispatch:

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one deployment at a time, but do not cancel in-progress deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build Job: Compiles and prepares the Next.js app for deployment
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Detect the package manager (npm or yarn)
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      # Step 3: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      # Step 4: Install project dependencies
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Check for CNAME
        id: check-cname
        run: |
          if [ -f "CNAME" ]; then
            echo "HAS_CNAME=true" >> $GITHUB_OUTPUT
          else
            echo "HAS_CNAME=false" >> $GITHUB_OUTPUT
          fi

      # Set BASE_PATH based on CNAME presence
      - name: Set Base Path
        env:
          REPO_NAME: ${{ github.repository }} 
        run: |
          if [ "${{ steps.check-cname.outputs.HAS_CNAME }}" = "true" ]; then
            echo "BASE_PATH=" >> $GITHUB_ENV  # Root path for custom domain
          else
            REPO=${REPO_NAME#*/}             # Extract "Chords-Web" from repo name
            echo "BASE_PATH=/$REPO" >> $GITHUB_ENV
          fi


      # Step 5: Install ts-node
      - name: Install ts-node 
        run: npm install -g ts-node

      # Step 6: Run script to generate the manifest file for Next.js
      - name: Run manifest generation script
        run: ts-node scripts/generateManifest.mjs

      # Step 7: Configure GitHub Pages for Next.js
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically configures basePath and disables image optimization
          static_site_generator: next

      # Step 8: Restore Next.js build cache to speed up builds
      - name: Restore Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate cache key based on package files and source code
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If cache key changes, try restoring from a previous cache
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      # Step 9: Build the Next.js project
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      # Step 10: Upload the built site as an artifact for deployment
      - name: Upload build artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment Job: Deploys the built site to GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 11: Deploy the site to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
